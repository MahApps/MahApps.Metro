<UserControl x:Class="MetroDemo.HamburgerMenuRipple"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:local="clr-namespace:MetroDemo"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             d:DataContext="{d:DesignInstance local:MainWindowViewModel}"
             d:DesignHeight="300"
             d:DesignWidth="400"
             mc:Ignorable="d">

    <UserControl.Resources>
        <ResourceDictionary>
            <!--  This is the template for the menu items.  -->
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type mah:HamburgerMenuIconItem}">
                <Grid Height="48">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ContentControl Grid.Column="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{Binding Icon}"
                                    Focusable="False"
                                    IsTabStop="False" />
                    <TextBlock Grid.Column="1"
                               VerticalAlignment="Center"
                               FontSize="16"
                               Text="{Binding Label}" />
                </Grid>
            </DataTemplate>

            <ObjectDataProvider x:Key="DisplayModeEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type mah:SplitViewDisplayMode}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="mah:SplitViewDisplayMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider x:Key="VisibilityEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type Visibility}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Visibility" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Style x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple"
                   BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem}"
                   TargetType="{x:Type ListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid x:Name="RootGrid"
                                  Background="Transparent"
                                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <mah:ClipBorder x:Name="Background"
                                                Background="{TemplateBinding Background}"
                                                CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <mah:ClipBorder x:Name="Border"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <Grid>
                                        <Grid HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Rectangle x:Name="SelectionIndicator"
                                                       Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                                       Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                                       Fill="{TemplateBinding Foreground}"
                                                       Focusable="False"
                                                       Opacity="0.0" />
                                        </Grid>
                                        <materialDesign:Ripple x:Name="ContentPresenter"
                                                               Padding="{TemplateBinding Padding}"
                                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                               Content="{TemplateBinding Content}"
                                                               ContentTemplate="{TemplateBinding ContentTemplate}"
                                                               ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                               Feedback="{DynamicResource MahApps.Brushes.Gray.MouseOver}"
                                                               Focusable="False"
                                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </mah:ClipBorder>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="RootGrid" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Background" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="mah:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
                <Setter Property="mah:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
                <Setter Property="mah:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
                <Setter Property="mah:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="mah:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
                <Setter Property="mah:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
                <Setter Property="mah:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray.SemiTransparent}" />
                <Setter Property="mah:ItemHelper.HoverSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
                <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="mah:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
            </Style>

            <Style x:Key="MahApps.Styles.HamburgerMenu.Ripple"
                   BasedOn="{StaticResource MahApps.Styles.HamburgerMenu}"
                   TargetType="{x:Type mah:HamburgerMenu}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                <Setter Property="OptionsItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                <Setter Property="PaneBackground" Value="{DynamicResource MahApps.Brushes.ThemeBackground}" />
                <Setter Property="PaneForeground" Value="{DynamicResource MahApps.Brushes.Text}" />
                <Setter Property="ShowSelectionIndicator" Value="True" />
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ScrollViewer Grid.Column="1"
                      MinWidth="230"
                      Margin="10 10 5 10"
                      Padding="0 0 5 0"
                      HorizontalContentAlignment="Stretch"
                      HorizontalScrollBarVisibility="Disabled">
            <StackPanel Margin="0 0 0 10" Orientation="Vertical">
                <mah:ToggleSwitch Margin="0 10 0 5"
                                  Header="IsPaneOpen:"
                                  IsOn="{Binding ElementName=HamburgerMenuControl, Path=IsPaneOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <mah:ToggleSwitch Margin="0 10 0 5"
                                  Header="CanResizeOpenPane:"
                                  IsOn="{Binding ElementName=HamburgerMenuControl, Path=CanResizeOpenPane, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <mah:MetroHeader Margin="0 10 0 5" Header="DisplayMode:">
                    <ComboBox MinWidth="150"
                              HorizontalAlignment="Left"
                              ItemsSource="{Binding Source={StaticResource DisplayModeEnumValues}}"
                              SelectedItem="{Binding ElementName=HamburgerMenuControl, Path=DisplayMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0 10 0 5" Header="SelectedIndex:">
                    <Slider AutoToolTipPlacement="TopLeft"
                            Maximum="3"
                            Minimum="0"
                            Value="{Binding ElementName=HamburgerMenuControl, Path=SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0 10 0 5" Header="CompactPaneLength:">
                    <Slider AutoToolTipPlacement="TopLeft"
                            Maximum="80"
                            Minimum="10"
                            Value="{Binding ElementName=HamburgerMenuControl, Path=CompactPaneLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0 10 0 5" Header="OpenPaneLength:">
                    <Slider AutoToolTipPlacement="TopLeft"
                            Maximum="400"
                            Minimum="50"
                            Value="{Binding ElementName=HamburgerMenuControl, Path=OpenPaneLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0 10 0 5" Header="HamburgerVisibility:">
                    <ComboBox MinWidth="150"
                              HorizontalAlignment="Left"
                              ItemsSource="{Binding Source={StaticResource VisibilityEnumValues}}"
                              SelectedItem="{Binding ElementName=HamburgerMenuControl, Path=HamburgerVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0 10 0 5" Header="Hamburger Width / Height:">
                    <UniformGrid Columns="2">
                        <Slider Margin="0 0 5 0"
                                AutoToolTipPlacement="TopLeft"
                                Maximum="80"
                                Minimum="10"
                                Value="{Binding ElementName=HamburgerMenuControl, Path=HamburgerWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Slider Margin="5 0 0 0"
                                AutoToolTipPlacement="TopLeft"
                                Maximum="80"
                                Minimum="10"
                                Value="{Binding ElementName=HamburgerMenuControl, Path=HamburgerHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </UniformGrid>
                </mah:MetroHeader>
            </StackPanel>
        </ScrollViewer>

        <Border Grid.Column="0"
                Margin="10 10 0 10"
                BorderBrush="{DynamicResource MahApps.Brushes.Gray7}"
                BorderThickness="1">

            <mah:HamburgerMenu x:Name="HamburgerMenuControl"
                               HamburgerWidth="48"
                               IsPaneOpen="True"
                               ItemInvoked="HamburgerMenuControl_OnItemInvoked"
                               ItemTemplate="{StaticResource MenuItemTemplate}"
                               OptionsItemTemplate="{StaticResource MenuItemTemplate}"
                               SelectedIndex="0"
                               Style="{StaticResource MahApps.Styles.HamburgerMenu.Ripple}"
                               VerticalScrollBarOnLeftSide="False">
                <!--  Items  -->
                <mah:HamburgerMenu.ItemsSource>
                    <mah:HamburgerMenuItemCollection>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Home}" Label="Home">
                            <mah:HamburgerMenuIconItem.Tag>
                                <local:HomeView />
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=AccountCircle}" Label="Private">
                            <mah:HamburgerMenuIconItem.Tag>
                                <local:PrivateView />
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Octicons Kind=Briefcase}" Label="Briefcase">
                            <mah:HamburgerMenuIconItem.Tag>
                                <UserControl>
                                    <StackPanel Orientation="Vertical">
                                        <mah:ToggleSwitch Margin="0 0 0 5" Header="Lorem ipsum dolor sit amet, consectetur adipiscing elit" />
                                        <mah:ToggleSwitch Margin="0 0 0 5"
                                                          Header="Ut dictum arcu egestas aliquet elementum"
                                                          IsOn="True" />
                                        <mah:ToggleSwitch Margin="0 0 0 5" Header="Pellentesque ultricies metus quis dui luctus, vel faucibus risus rhoncus" />
                                    </StackPanel>
                                </UserControl>
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.ItemsSource>

                <!--  Options  -->
                <mah:HamburgerMenu.OptionsItemsSource>
                    <mah:HamburgerMenuItemCollection>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Cog}" Label="Settings">
                            <mah:HamburgerMenuIconItem.Tag>
                                <local:SettingsView />
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.OptionsItemsSource>

                <mah:HamburgerMenu.ContentTemplate>
                    <DataTemplate DataType="{x:Type mah:HamburgerMenuIconItem}">
                        <Grid Margin="20 0 10 0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0"
                                       Margin="0 15 0 5"
                                       Padding="0"
                                       FontFamily="{DynamicResource MahApps.Fonts.Family.Header}"
                                       FontSize="{DynamicResource MahApps.Font.Size.Header}"
                                       Text="{Binding Label}" />
                            <ScrollViewer Grid.Row="1"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Disabled"
                                          VerticalScrollBarVisibility="Auto">
                                <ContentControl Content="{Binding Tag}" Focusable="False" />
                            </ScrollViewer>
                        </Grid>
                    </DataTemplate>
                </mah:HamburgerMenu.ContentTemplate>

            </mah:HamburgerMenu>

        </Border>
    </Grid>

</UserControl>