<UserControl x:Class="MetroDemo.ExampleViews.TextExamples"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:MetroDemo="clr-namespace:MetroDemo"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             d:DataContext="{d:DesignInstance MetroDemo:MainWindowViewModel}"
             d:DesignHeight="600"
             d:DesignWidth="800"
             mc:Ignorable="d">

    <UserControl.Resources>
        <Thickness x:Key="ColumnMargin">10 5 10 5</Thickness>
        <Thickness x:Key="ControlMargin">0 5 0 0</Thickness>

        <ObjectDataProvider x:Key="NumericInputValues"
                            MethodName="GetValues"
                            ObjectType="{x:Type Controls:NumericInput}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="Controls:NumericInput" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </UserControl.Resources>

    <AdornerDecorator>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0"
                        Grid.RowSpan="2"
                        Grid.Column="0"
                        Margin="{StaticResource ColumnMargin}">
                <Label Content="TextBox" Style="{DynamicResource DescriptionHeaderStyle}" />
                <Controls:MetroHeader Margin="{StaticResource ControlMargin}" Header="TextBox Header">
                    <Controls:MetroHeader.HeaderTemplate>
                        <DataTemplate>
                            <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                <iconPacks:PackIconMaterial VerticalAlignment="Center" Kind="FaceProfile" />
                                <TextBlock Margin="2 0 0 0"
                                           VerticalAlignment="Center"
                                           Text="{Binding}" />
                            </StackPanel>
                        </DataTemplate>
                    </Controls:MetroHeader.HeaderTemplate>
                    <TextBox SpellCheck.IsEnabled="True" Text="Enabled">
                        <TextBox.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="This is only a Test-Item" />
                            </ContextMenu>
                        </TextBox.ContextMenu>
                    </TextBox>
                </Controls:MetroHeader>
                <TextBox Margin="{StaticResource ControlMargin}"
                         HorizontalContentAlignment="Stretch"
                         Controls:TextBoxHelper.ClearTextButton="True"
                         Controls:TextBoxHelper.IsWaitingForData="True"
                         Controls:TextBoxHelper.UseFloatingWatermark="True"
                         Controls:TextBoxHelper.Watermark="Watermark"
                         Controls:TextBoxHelper.WatermarkAlignment="Right"
                         SpellCheck.IsEnabled="True"
                         ToolTip="Default alignment">
                    <TextBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Custom Item" />
                            <Separator />
                            <MenuItem Command="ApplicationCommands.Cut" Style="{DynamicResource MahApps.Styles.MenuItem}" />
                            <MenuItem Command="ApplicationCommands.Copy" Style="{DynamicResource MahApps.Styles.MenuItem}" />
                            <MenuItem Command="ApplicationCommands.Paste" Style="{DynamicResource MahApps.Styles.MenuItem}" />
                        </ContextMenu>
                    </TextBox.ContextMenu>
                </TextBox>
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                         ContextMenu="{x:Null}"
                         Text="Clear button and no ContextMenu">
                    <TextBox.Style>
                        <Style BasedOn="{StaticResource MahApps.Styles.TextBox}" TargetType="{x:Type TextBox}">
                            <Setter Property="Controls:TextBoxHelper.ClearTextButton" Value="True" />
                            <Style.Triggers>
                                <Trigger Property="Controls:TextBoxHelper.HasText" Value="False">
                                    <Setter Property="Controls:TextBoxHelper.ClearTextButton" Value="False" />
                                    <Setter Property="Controls:TextBoxHelper.Watermark" Value="Now enter some text..." />
                                </Trigger>
                                <Trigger Property="Controls:TextBoxHelper.HasText" Value="True">
                                    <Setter Property="Controls:TextBoxHelper.ClearTextButton" Value="True" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                         Controls:TextBoxHelper.ClearTextButton="True"
                         Controls:TextBoxHelper.UseFloatingWatermark="True"
                         Controls:TextBoxHelper.Watermark="Search...">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Return"
                                    Command="{Binding TextBoxButtonCmd, Mode=OneWay}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TextBox}, Path=Text, Mode=OneWay}" />
                    </TextBox.InputBindings>
                    <TextBox.Style>
                        <Style BasedOn="{StaticResource MahApps.Styles.TextBox.Search}" TargetType="{x:Type TextBox}">
                            <Style.Triggers>
                                <Trigger Property="Controls:TextBoxHelper.HasText" Value="True">
                                    <Setter Property="Controls:TextBoxHelper.ButtonContent" Value="r" />
                                    <Setter Property="Controls:TextBoxHelper.ButtonContentTemplate" Value="{x:Null}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <TextBox Name="test2"
                         Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmdWithParameter, Mode=OneWay}"
                         Controls:TextBoxHelper.ButtonCommandParameter="{Binding ElementName=test2, Path=Text}"
                         Controls:TextBoxHelper.Watermark="Enter parameter"
                         Style="{DynamicResource MahApps.Styles.TextBox.Search}" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                         Controls:TextBoxHelper.ButtonContent="s"
                         Controls:TextBoxHelper.Watermark="Custom icon style"
                         Style="{DynamicResource MahApps.Styles.TextBox.Button}" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.Watermark="Number smaller than 10"
                         Text="{Binding IntegerGreater10Property, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.SelectAllOnFocus="True"
                         Text="Select all on focus" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         IsEnabled="False"
                         Text="Disabled" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.Watermark="Watermark"
                         IsEnabled="False" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.ClearTextButton="True"
                         Controls:TextBoxHelper.Watermark="Watermark"
                         IsEnabled="False"
                         Text="Clear button" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.Watermark="Search style"
                         IsEnabled="False"
                         Style="{DynamicResource MahApps.Styles.TextBox.Search}" />
                <TextBox Margin="{StaticResource ControlMargin}"
                         Controls:TextBoxHelper.Watermark="Number smaller than 10"
                         IsEnabled="False"
                         Text="{Binding IntegerGreater10Property, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}" />
            </StackPanel>

            <StackPanel Grid.Row="0"
                        Grid.Column="1"
                        Margin="{StaticResource ColumnMargin}">
                <Label Content="RichTextBox" Style="{DynamicResource DescriptionHeaderStyle}" />
                <RichTextBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ClearTextButton="True"
                             Controls:TextBoxHelper.Watermark="Type something in..."
                             IsDocumentEnabled="True"
                             SpellCheck.IsEnabled="True" />
                <RichTextBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ClearTextButton="True"
                             Controls:TextBoxHelper.UseFloatingWatermark="True"
                             Controls:TextBoxHelper.Watermark="Need some input..."
                             IsDocumentEnabled="True"
                             SpellCheck.IsEnabled="True" />
                <RichTextBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                             Controls:TextBoxHelper.ButtonContent="s"
                             Controls:TextBoxHelper.Watermark="Type in..."
                             IsDocumentEnabled="True"
                             SpellCheck.IsEnabled="True"
                             Style="{StaticResource MahApps.Styles.RichTextBox.Button}" />
                <RichTextBox Height="120"
                             Margin="{StaticResource ControlMargin}"
                             Padding="5"
                             Controls:TextBoxHelper.SelectAllOnFocus="True"
                             IsDocumentEnabled="True"
                             SpellCheck.IsEnabled="True">
                    <!--
                        Workaround for: RichTextBox behaves oddly inside a ScrollViewer
                        
                        The workaround would be to bind the Documents PageWidth to the RichTextBox's ActualWidth
                    -->
                    <FlowDocument PageWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RichTextBox}}, Path=ActualWidth}">
                        <Paragraph>
                            <Hyperlink NavigateUri="https://github.com/MahApps/MahApps.Metro">
                                <Run Text="Normal" />
                            </Hyperlink>
                            <LineBreak />
                            <Run>Bacon ipsum dolor sit amet venison drumstick meatball ham hock corned beef. Strip steak bacon andouille pig beef short ribs.</Run>
                        </Paragraph>
                    </FlowDocument>
                </RichTextBox>
                <RichTextBox Height="120"
                             Margin="{StaticResource ControlMargin}"
                             Padding="5"
                             IsDocumentEnabled="True"
                             IsReadOnly="True">
                    <FlowDocument PageWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RichTextBox}}, Path=ActualWidth}">
                        <Paragraph>
                            <Hyperlink NavigateUri="https://github.com/MahApps/MahApps.Metro">
                                <Run Text="ReadOnly" />
                            </Hyperlink>
                            <LineBreak />
                            <Run>Bacon ipsum dolor sit amet venison drumstick meatball ham hock corned beef. Strip steak bacon andouille pig beef short ribs.</Run>
                        </Paragraph>
                    </FlowDocument>
                </RichTextBox>
                <RichTextBox Height="120"
                             Margin="{StaticResource ControlMargin}"
                             Padding="5"
                             IsDocumentEnabled="True"
                             IsEnabled="False">
                    <FlowDocument PageWidth="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RichTextBox}}, Path=ActualWidth}">
                        <Paragraph>
                            <Hyperlink NavigateUri="https://github.com/MahApps/MahApps.Metro">
                                <Run Text="Disabled" />
                            </Hyperlink>
                            <LineBreak />
                            <Run>Bacon ipsum dolor sit amet venison drumstick meatball ham hock corned beef. Strip steak bacon andouille pig beef short ribs.</Run>
                        </Paragraph>
                    </FlowDocument>
                </RichTextBox>
            </StackPanel>

            <StackPanel Grid.Row="0"
                        Grid.RowSpan="2"
                        Grid.Column="2"
                        Margin="{StaticResource ColumnMargin}">
                <Label Content="PasswordBox" Style="{DynamicResource DescriptionHeaderStyle}" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.Watermark="Password"
                             Password="Password" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.UseFloatingWatermark="True"
                             Controls:TextBoxHelper.Watermark="Win8"
                             Password="Win8"
                             Style="{StaticResource MahApps.Styles.PasswordBox.Win8}" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.HasText), Mode=OneWay}"
                             Controls:TextBoxHelper.IsWaitingForData="True"
                             Controls:TextBoxHelper.UseFloatingWatermark="True"
                             Controls:TextBoxHelper.Watermark="Revealed PasswordBox"
                             Style="{StaticResource MahApps.Styles.PasswordBox.ButtonRevealed}" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                             Controls:TextBoxHelper.ClearTextButton="True"
                             Controls:TextBoxHelper.UseFloatingWatermark="True"
                             Controls:TextBoxHelper.Watermark="Password"
                             Password="Password" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:PasswordBoxHelper.CapsLockIcon="!"
                             Controls:TextBoxHelper.ButtonCommand="{Binding TextBoxButtonCmd, Mode=OneWay}"
                             Controls:TextBoxHelper.ButtonContent="4"
                             Controls:TextBoxHelper.UseFloatingWatermark="True"
                             Controls:TextBoxHelper.Watermark="Custom icon style"
                             Style="{DynamicResource MahApps.Styles.PasswordBox.Button}">
                    <Controls:PasswordBoxHelper.CapsLockWarningToolTip>
                        <TextBlock>
                            <Run Text="This is a custom Warning to show you that" />
                            <Run Foreground="Red"
                                 Text="CAPS LOCK"
                                 TextDecorations="Underline" />
                            <Run Text=" is on" />
                        </TextBlock>
                    </Controls:PasswordBoxHelper.CapsLockWarningToolTip>
                </PasswordBox>
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             IsEnabled="False"
                             Password="Password" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.ClearTextButton="True"
                             IsEnabled="False"
                             Password="Password" />

                <Label Content="Select all on focus" />
                <PasswordBox Margin="{StaticResource ControlMargin}"
                             Controls:TextBoxHelper.SelectAllOnFocus="True"
                             Password="Password"
                             ToolTip="Select all on focus" />
            </StackPanel>

            <StackPanel Grid.Row="0"
                        Grid.RowSpan="2"
                        Grid.Column="3"
                        Margin="{StaticResource ColumnMargin}"
                        Grid.IsSharedSizeScope="True">
                <Label Content="NumericUpDown" Style="{DynamicResource DescriptionHeaderStyle}" />

                <CheckBox x:Name="ReadOnlyCheck"
                          Margin="1"
                          Content="IsReadOnly" />
                <CheckBox x:Name="HasDecimalsCheckBox"
                          Margin="1"
                          Content="HasDecimals"
                          IsChecked="True" />

                <Grid Margin="{StaticResource ControlMargin}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="LabelCol" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="NumericInputMode" />
                    <ComboBox x:Name="NumericInputCheckBox"
                              Grid.Column="1"
                              Width="100"
                              Margin="1"
                              ItemsSource="{Binding Source={StaticResource NumericInputValues}}"
                              SelectedItem="{x:Static Controls:NumericInput.All}" />
                </Grid>

                <Label Content="Min=&quot;0&quot; Max=&quot;10&quot; TextAlignment=&quot;Left&quot;" />
                <Controls:NumericUpDown x:Name="Test"
                                        IsEnabled="False"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        Maximum="10"
                                        Minimum="0"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        TextAlignment="Left"
                                        Value="5" />

                <Label Content="Interval=&quot;5.5&quot; IsTabStop=&quot;False&quot;" />
                <CheckBox x:Name="SnapToMultipleOfIntervalCheck"
                          Margin="1"
                          Content="SnapToMultipleOfInterval"
                          IsChecked="True" />
                <Controls:NumericUpDown Controls:TextBoxHelper.ClearTextButton="True"
                                        ButtonsAlignment="Left"
                                        Interval="5.5"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        IsTabStop="False"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        SnapToMultipleOfInterval="{Binding ElementName=SnapToMultipleOfIntervalCheck, Path=IsChecked, Mode=TwoWay}"
                                        Value="5" />

                <Controls:NumericUpDown Margin="{StaticResource ControlMargin}"
                                        Controls:TextBoxHelper.Watermark="No Speedup when long pressed"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        Speedup="false" />
                <Controls:NumericUpDown Margin="{StaticResource ControlMargin}"
                                        Controls:TextBoxHelper.UseFloatingWatermark="True"
                                        Controls:TextBoxHelper.Watermark="Speedup when pressed after 1000ms"
                                        Delay="1000"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        Speedup="true" />

                <Label Margin="{StaticResource ControlMargin}"
                       Content="{Binding ElementName=test, Path=Value, Mode=OneWay}"
                       ContentStringFormat="StringFormat, Real Value = {0}" />
                <Controls:NumericUpDown x:Name="test"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        Maximum="100"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        StringFormat="pcs. {0:N2} pcs."
                                        Value="5" />
                <Grid Margin="{StaticResource ControlMargin}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="LabelCol" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="StringFormat" />
                    <TextBox Grid.Column="1"
                             VerticalAlignment="Center"
                             Controls:TextBoxHelper.ClearTextButton="True"
                             Text="{Binding ElementName=StringFormatNumUpDown, Path=StringFormat, Mode=TwoWay, UpdateSourceTrigger=LostFocus, NotifyOnValidationError=True}" />
                </Grid>
                <Grid Margin="{StaticResource ControlMargin}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="LabelCol" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0" Content="CultureInfo" />
                    <ComboBox Grid.Column="1"
                              VerticalAlignment="Center"
                              Controls:TextBoxHelper.ClearTextButton="True"
                              DisplayMemberPath="DisplayName"
                              ItemsSource="{Binding CultureInfos, Mode=OneWay}"
                              SelectedItem="{Binding ElementName=StringFormatNumUpDown, Path=Culture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}" />
                </Grid>
                <Controls:NumericUpDown x:Name="StringFormatNumUpDown"
                                        Margin="{StaticResource ControlMargin}"
                                        Interval=".1"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        StringFormat="0,000.00"
                                        Value="5" />
                <TextBox x:Name="TextBox"
                         Margin="{StaticResource ControlMargin}"
                         Text="{Binding ElementName=StringFormatNumUpDown, Path=Value, Mode=TwoWay}" />

                <Label Content="Select all on focus" />
                <Controls:NumericUpDown Controls:TextBoxHelper.SelectAllOnFocus="True"
                                        ButtonsAlignment="Left"
                                        Interval="5"
                                        IsReadOnly="{Binding ElementName=ReadOnlyCheck, Path=IsChecked, Mode=TwoWay}"
                                        NumericInputMode="{Binding ElementName=NumericInputCheckBox, Path=SelectedItem, Mode=TwoWay}"
                                        Value="500" />

                <Label Content="Focusing / Value changing" />
                <CheckBox Margin="1"
                          Content="Up / Down Buttons are focusable"
                          IsChecked="{Binding UpDownButtonsFocusable, ElementName=numericUpDownFocus, Mode=TwoWay}" />
                <CheckBox Margin="1"
                          Content="Change value directly on TextChanged event"
                          IsChecked="{Binding ChangeValueOnTextChanged, ElementName=numericUpDownFocus, Mode=TwoWay}" />
                <Slider Margin="{StaticResource ControlMargin}"
                        Interval="1"
                        IsSnapToTickEnabled="True"
                        LargeChange="5"
                        Maximum="20"
                        Minimum="0"
                        SmallChange="1"
                        TickFrequency="1"
                        TickPlacement="BottomRight"
                        Value="{Binding ElementName=numericUpDownFocus, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Controls:NumericUpDown x:Name="numericUpDownFocus"
                                        Margin="{StaticResource ControlMargin}"
                                        Maximum="20"
                                        Minimum="0"
                                        Value="0" />
            </StackPanel>

            <StackPanel Grid.Row="1"
                        Grid.Column="1"
                        Margin="{StaticResource ColumnMargin}">
                <Label Content="HotKeyBox" Style="{DynamicResource DescriptionHeaderStyle}" />
                <Controls:HotKeyBox Margin="{StaticResource ControlMargin}"
                                    Controls:TextBoxHelper.Watermark="Enter hot key"
                                    AreModifierKeysRequired="{Binding ElementName=ModifierKeysRequired, Path=IsChecked}"
                                    HotKey="{Binding HotKey, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True}" />
                <TextBlock Margin="{StaticResource ControlMargin}"
                           Foreground="{DynamicResource MahApps.Brushes.DarkIdealForegroundDisabled}"
                           Text="Try SHIFT+D to demonstrate validation" />
                <CheckBox x:Name="ModifierKeysRequired"
                          Margin="{StaticResource ControlMargin}"
                          Content="Require modifier keys" />
            </StackPanel>
        </Grid>
    </AdornerDecorator>

</UserControl>