<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters" xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ListView.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Scrollbars.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Buttons.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Converters:ToUpperConverter x:Key="ToUpperConverter" />

  <!--ValidationToolTipTemplate Style-->
  <ControlTemplate x:Key="ValidationToolTipTemplate">
    <Grid x:Name="Root" Margin="5,0" Opacity="0" RenderTransformOrigin="0,0">
      <Grid.RenderTransform>
        <TranslateTransform x:Name="xform" X="-25" />
      </Grid.RenderTransform>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="OpenStates">
          <VisualStateGroup.Transitions>
            <VisualTransition GeneratedDuration="0" />
            <VisualTransition GeneratedDuration="0:0:0.2" To="Open">
              <Storyboard>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="X" Storyboard.TargetName="xform">
                  <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                  <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
            </VisualTransition>
          </VisualStateGroup.Transitions>
          <VisualState x:Name="Closed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Open">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="X" Storyboard.TargetName="xform">
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border Background="{DynamicResource ValidationBrush1}" CornerRadius="5" Margin="4,4,-4,-4" />
      <Border Background="{DynamicResource ValidationBrush2}" CornerRadius="4" Margin="3,3,-3,-3" />
      <Border Background="{DynamicResource ValidationBrush3}" CornerRadius="3" Margin="2,2,-2,-2" />
      <Border Background="{DynamicResource ValidationBrush4}" CornerRadius="2" Margin="1,1,-1,-1" />
      <Border Background="{DynamicResource ValidationBrush5}" CornerRadius="2" />
      <Border CornerRadius="2">
        <TextBlock Foreground="{DynamicResource WhiteColorBrush}" MaxWidth="250" Margin="8,4,8,4" TextWrapping="Wrap"
            Text="{Binding (Validation.Errors)[0].ErrorContent}" UseLayoutRounding="false" />
      </Border>
    </Grid>
  </ControlTemplate>

  <Style TargetType="Button" BasedOn="{StaticResource MetroCircleButtonStyle}" x:Key="BackButton">
    <Setter Property="Content">
      <Setter.Value>
        <Viewbox>
          <Grid Width="51.7188" Height="51.7187">
            <Path Height="16.937" Width="22.004"
                Data="M21.988033,13.391296 C22.549532,13.391296 23.110556,13.60597 23.538605,14.03532 C24.395903,14.890019 24.395903,16.280617 23.538605,17.136618 L17.010527,23.663309 L37.33316,23.663309 C38.090561,23.663309 38.759758,24.04731 39.153198,24.63131 C39.390507,24.98201 39.529175,25.403309 39.529175,25.859308 C39.529175,26.464708 39.283817,27.012608 38.885159,27.410006 C38.489159,27.808706 37.939861,28.052706 37.33316,28.052706 L17.010527,28.052706 L23.538605,34.5793 C24.395903,35.4366 24.395903,36.825996 23.538605,37.681896 C23.109207,38.111298 22.549208,38.327297 21.986609,38.327297 C21.42391,38.327297 20.865211,38.112595 20.434614,37.684597 L10.101147,27.340605 C10.062546,27.296606 10.021248,27.251308 9.9839478,27.203308 C9.9532471,27.162008 9.9238472,27.119308 9.8958473,27.076708 C9.8652458,27.031307 9.8359451,26.987309 9.807847,26.938007 C9.7785463,26.886007 9.7558489,26.834007 9.6719484,26.650007 C9.6479464,26.594007 9.6332483,26.536608 9.6145487,26.478008 C9.6011477,26.431307 9.5865488,26.384607 9.5759478,26.336708 C9.5625467,26.280607 9.5545473,26.223309 9.5466471,26.167307 C9.5385485,26.118008 9.5345469,26.069908 9.5292482,26.022007 C9.5238466,25.963308 9.5238466,25.904707 9.5265474,25.845907 C9.5265474,25.799307 9.5238466,25.752607 9.5292482,25.705908 C9.531846,25.644707 9.5412493,25.584608 9.5491457,25.524708 C9.5572481,25.479307 9.5625467,25.435308 9.573247,25.38871 C9.5865488,25.330009 9.6038485,25.271309 9.6225481,25.21401 C9.6358461,25.167309 9.6479464,25.12331 9.7372484,24.91531 C9.7598467,24.871309 9.7812471,24.827309 9.8052492,24.78331 C9.8332481,24.73131 9.8678474,24.68071 9.9812469,24.51671 C10.021248,24.46731 10.062546,24.42071 10.163844,24.30731 L20.434614,14.03532 C20.864563,13.60597 21.426537,13.391296 21.988033,13.391296 z"
                Fill="{DynamicResource BlackBrush}" Stretch="Fill" UseLayoutRounding="False" />
          </Grid>
        </Viewbox>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Controls:ProgressIndicator}">
    <Setter Property="ProgressColour" Value="{DynamicResource AccentColorBrush}" />
  </Style>
  <!-- Context Menu Styling START -->
  <!-- Original style from http://www.jeff.wilcox.name/2010/05/zunelike-contextmenu-style/ -->
  <Style TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="LightGray" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Margin" Value="6,2,6,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
              Background="{TemplateBinding Background}" Height="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
    <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="8,2,10,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuItem">
          <Grid>
            <Rectangle RadiusX="0" RadiusY="0" Fill="{TemplateBinding Background}"
                Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />

            <Rectangle x:Name="Bg" RadiusX="0" RadiusY="0" StrokeThickness="0" Opacity="0" Fill="#11000000" />

            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="2" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="17" />
              </Grid.ColumnDefinitions>

              <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" Margin="1" Opacity=".7"
                  VerticalAlignment="Center" />

              <ContentPresenter x:Name="Presenter" Opacity=".7" Content="{TemplateBinding Header}"
                  ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="2" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter Property="Opacity" TargetName="Bg" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ContextMenu}">
    <Setter Property="Background" Value="#FFFFFFFF" />
    <Setter Property="BorderThickness" Value="0,1,0,1" />
    <Setter Property="BorderBrush" Value="#0D000000" />
    <Setter Property="Padding" Value="0,4,0,4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Margin="5,5,5,5" x:Name="Menu" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
              CornerRadius="0">
            <Border.Effect>
              <DropShadowEffect ShadowDepth="0" Opacity="0.6" BlurRadius="5" />
            </Border.Effect>
            <Border.Triggers>
              <EventTrigger RoutedEvent="Rectangle.Loaded">
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="Menu" />
                  </Storyboard>
                </BeginStoryboard>
              </EventTrigger>
            </Border.Triggers>
            <Grid>
              <ItemsPresenter Margin="{TemplateBinding Padding}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!-- Context Menu Styling END -->

  <!--Tooltip Style-->
  <Style TargetType="ToolTip">
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Padding" Value="3,0,3,0" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource ItemSelectedBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <Border x:Name="Root" BorderThickness="{TemplateBinding BorderThickness}"
              Background="{DynamicResource BlackBrush}" Effect="{DynamicResource DropShadowBrush}" Opacity="0">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="OpenStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Open" GeneratedDuration="0:0:0.3" To="Closed" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Closed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="Root">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Open">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="Root">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Padding="{TemplateBinding Padding}">
              <Border.Resources>
                <Storyboard x:Key="Visible State" />
                <Storyboard x:Key="Normal State" />
              </Border.Resources>
              <Border.Background>
                <DynamicResource ResourceKey="BlackBrush" />
              </Border.Background>
              <ContentPresenter Cursor="{TemplateBinding Cursor}" ContentTemplate="{TemplateBinding ContentTemplate}"
                  Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" />
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Password box style -->
  <Style TargetType="PasswordBox">
    <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Foreground">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource TextBoxText}" />
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="2" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="RootElement">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="0.8" Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="MouseOverBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="DisabledVisualElement" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="FocusVisualElement" />
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="FocusInnerRectangle">
                      <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="FocusVisualElement" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                        Storyboard.TargetName="validationTooltip">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                Opacity="1">
              <Border x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" Padding="4,0,3,2"
                  VerticalAlignment="Center" />
            </Border>
            <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource ControlsDisabledBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ControlsDisabledBrush}"
                IsHitTestVisible="False" Opacity="0" />
            <Border x:Name="MouseOverBorder" BorderBrush="{DynamicResource TextBoxMouseOverBorderBrush}"
                BorderThickness="1" Opacity="0" />
            <Border x:Name="FocusVisualElement" BorderBrush="{DynamicResource TextBoxMouseOverBorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="False" Opacity="0">
              <Rectangle x:Name="FocusInnerRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0"
                  Stroke="{DynamicResource TextBoxMouseOverInnerBorderBrush}" />
            </Border>
            <Border x:Name="ValidationErrorElement" BorderBrush="{DynamicResource ControlsValidationBrush}"
                BorderThickness="1" CornerRadius="1" Visibility="Collapsed">
              <ToolTipService.ToolTip>
                <ToolTip x:Name="validationTooltip"
                    DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                    PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                    Template="{DynamicResource ValidationToolTipTemplate}">
                  <ToolTip.Triggers>
                    <EventTrigger RoutedEvent="Canvas.Loaded">
                      <BeginStoryboard>
                        <Storyboard>
                          <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
                              Storyboard.TargetName="validationTooltip">
                            <DiscreteObjectKeyFrame KeyTime="0">
                              <DiscreteObjectKeyFrame.Value>
                                <System:Boolean>true</System:Boolean>
                              </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                          </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                      </BeginStoryboard>
                    </EventTrigger>
                  </ToolTip.Triggers>
                </ToolTip>
              </ToolTipService.ToolTip>
              <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0"
                  VerticalAlignment="Top" Width="12">
                <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="{DynamicResource ValidationBrush5}"
                    Margin="1,3,0,0" />
                <Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="{DynamicResource WhiteColorBrush}" Margin="1,3,0,0" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--CheckBox Style-->
  <Style TargetType="CheckBox">
    <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
    <Setter Property="Background" Value="{DynamicResource CheckBoxBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Padding" Value="4,1,0,0" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="MouseOverRectangle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!--<ColorAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterWrapperColor" Storyboard.TargetProperty="Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Gray2}"/>
                                        </ColorAnimationUsingKeyFrames>-->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="grid">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="PressedRectangle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="contentPresenter">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0.55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="CheckIcon">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="IndeterminateIcon">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                        Storyboard.TargetName="validationTooltip">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="16" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
              <Grid x:Name="grid" Height="14" Width="14" Opacity="0.7">
                <Rectangle x:Name="Background" Fill="{TemplateBinding Background}"
                    Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                <Rectangle x:Name="MouseOverRectangle" Stroke="{DynamicResource CheckBoxMouseOverBrush}" Opacity="0" />
                <Rectangle x:Name="PressedRectangle" Stroke="{DynamicResource BlackBrush}" Opacity="0" />
                <Path Opacity="0" x:Name="CheckIcon" Data="M49.4375,110.4375 L51.4995,112.812 L56.3745,107.24883"
                    HorizontalAlignment="Center" Height="7.6" Stretch="Fill" Stroke="{DynamicResource BlackBrush}"
                    UseLayoutRounding="False" VerticalAlignment="Center" Width="8.9" StrokeStartLineCap="Triangle"
                    StrokeEndLineCap="Triangle" StrokeThickness="2" />
                <Rectangle x:Name="IndeterminateIcon" Height="8" Width="8" Opacity="0">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{DynamicResource Gray3}" />
                  </Rectangle.Fill>
                </Rectangle>
                <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteColorBrush}" Opacity="0"
                    RadiusY="1" RadiusX="1" />
              </Grid>
              <Border x:Name="ValidationErrorElement" BorderBrush="{DynamicResource ControlsValidationBrush}"
                  BorderThickness="1" CornerRadius="1" Margin="1"
                  ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                  Visibility="Collapsed">
                <ToolTipService.ToolTip>
                  <ToolTip x:Name="validationTooltip"
                      DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                      PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                      Template="{DynamicResource ValidationToolTipTemplate}">
                    <ToolTip.Triggers>
                      <EventTrigger RoutedEvent="Canvas.Loaded">
                        <BeginStoryboard>
                          <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
                                Storyboard.TargetName="validationTooltip">
                              <DiscreteObjectKeyFrame KeyTime="0">
                                <DiscreteObjectKeyFrame.Value>
                                  <System:Boolean>true</System:Boolean>
                                </DiscreteObjectKeyFrame.Value>
                              </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                          </Storyboard>
                        </BeginStoryboard>
                      </EventTrigger>
                    </ToolTip.Triggers>
                  </ToolTip>
                </ToolTipService.ToolTip>
                <Grid Background="Transparent" HorizontalAlignment="Right" Height="10" Margin="0,-4,-4,0"
                    VerticalAlignment="Top" Width="10">
                  <Path Data="M 1,0 L5,0 A 2,2 90 0 1 7,2 L7,6 z" Fill="{DynamicResource ValidationBrush5}"
                      Margin="0,3,0,0" />
                  <Path Data="M 0,0 L2,0 L 7,5 L7,7" Fill="{DynamicResource WhiteColorBrush}" Margin="0,3,0,0" />
                </Grid>
              </Border>
            </Grid>
            <ContentControl Grid.Column="1">
              <ContentControl.Foreground>
                <SolidColorBrush x:Name="ContentPresenterWrapperColor" Color="{DynamicResource BlackColor}" />
              </ContentControl.Foreground>
              <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </ContentControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--RadioButton Style-->
  <Style TargetType="RadioButton">
    <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
    <Setter Property="Background" Value="{DynamicResource CheckBoxBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Padding" Value="4,1,0,0" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="MouseOverEllipse">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!--<ColorAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterWrapperColor" Storyboard.TargetProperty="Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Gray2}"/>
                                        </ColorAnimationUsingKeyFrames>-->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="grid">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="contentPresenter">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0.55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="CheckIcon">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                        Storyboard.TargetName="validationTooltip">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="16" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
              <Grid x:Name="grid" Height="15" Width="15" Opacity="0.7">
                <Ellipse x:Name="Background" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"
                    Margin="1" StrokeThickness="{TemplateBinding BorderThickness}" />
                <Ellipse x:Name="MouseOverEllipse" Stroke="{DynamicResource CheckBoxMouseOverBrush}" Margin="1"
                    Opacity="0" />
                <Ellipse x:Name="PressedEllipse" Stroke="{DynamicResource BlackBrush}" Margin="1" Opacity="0" />
                <Ellipse x:Name="CheckIcon" Fill="{DynamicResource BlackBrush}" Height="7" Opacity="0" Width="7" />
                <Ellipse x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteColorBrush}" Opacity="0" />
                <Grid x:Name="ValidationErrorElement"
                    ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="Collapsed">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="validationTooltip"
                        DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                        PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                        Template="{DynamicResource ValidationToolTipTemplate}">
                      <ToolTip.Triggers>
                        <EventTrigger RoutedEvent="Canvas.Loaded">
                          <BeginStoryboard>
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
                                  Storyboard.TargetName="validationTooltip">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                  <DiscreteObjectKeyFrame.Value>
                                    <System:Boolean>true</System:Boolean>
                                  </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </BeginStoryboard>
                        </EventTrigger>
                      </ToolTip.Triggers>
                    </ToolTip>
                  </ToolTipService.ToolTip>
                  <Ellipse Height="14" Stroke="{DynamicResource ControlsValidationBrush}" StrokeThickness="1" Width="14" />
                  <Ellipse Fill="{DynamicResource ControlsValidationBrush}" HorizontalAlignment="Right" Height="4"
                      Margin="0,-2,-1,0" VerticalAlignment="Top" Width="4" />
                  <Ellipse Fill="Transparent" HorizontalAlignment="Right" Height="10" Margin="0,-5,-4,0"
                      VerticalAlignment="Top" Width="10" />
                </Grid>
              </Grid>
            </Grid>
            <ContentControl Grid.Column="1">
              <ContentControl.Foreground>
                <SolidColorBrush x:Name="ContentPresenterWrapperColor" Color="{DynamicResource BlackColor}" />
              </ContentControl.Foreground>
              <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </ContentControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--TextBox Style-->
  <Style TargetType="{x:Type TextBox}">
    <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="FocusRectangle" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReadOnly">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="ReadOnlyVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="FocusRectangle" />
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="FocusInnerRectangle" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard />
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                        Storyboard.TargetName="validationTooltip">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="Base" Stroke="{TemplateBinding BorderBrush}"
                StrokeThickness="{TemplateBinding BorderThickness}" Opacity="1" Fill="{TemplateBinding Background}" />
            <Rectangle x:Name="FocusRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0"
                Stroke="{DynamicResource TextBoxMouseOverBorderBrush}" />
            <Rectangle x:Name="FocusInnerRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0"
                Margin="1" Stroke="{DynamicResource TextBoxMouseOverInnerBorderBrush}" />
            <Grid Margin="0,1,0,0">
              <Border x:Name="ReadOnlyVisualElement" Background="{x:Null}" Opacity="0" />
              <Grid>
                <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" IsTabStop="False" Margin="4,2,2,2"
                    VerticalAlignment="Stretch" Background="{x:Null}" />
              </Grid>
            </Grid>
            <Rectangle x:Name="DisabledVisualElement" Stroke="{DynamicResource ControlsDisabledBrush}"
                StrokeThickness="{TemplateBinding BorderThickness}" Fill="{DynamicResource ControlsDisabledBrush}"
                IsHitTestVisible="False" Opacity="0" />
            <Border x:Name="ValidationErrorElement" BorderBrush="{DynamicResource ControlsValidationBrush}"
                BorderThickness="1" Visibility="Collapsed">
              <ToolTipService.ToolTip>
                <ToolTip x:Name="validationTooltip"
                    DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                    PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                    Template="{DynamicResource ValidationToolTipTemplate}">
                  <ToolTip.Triggers>
                    <EventTrigger RoutedEvent="Canvas.Loaded">
                      <BeginStoryboard>
                        <Storyboard>
                          <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
                              Storyboard.TargetName="validationTooltip">
                            <DiscreteObjectKeyFrame KeyTime="0">
                              <DiscreteObjectKeyFrame.Value>
                                <System:Boolean>true</System:Boolean>
                              </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                          </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                      </BeginStoryboard>
                    </EventTrigger>
                  </ToolTip.Triggers>
                </ToolTip>
              </ToolTipService.ToolTip>
              <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0"
                  VerticalAlignment="Top" Width="12">
                <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="{DynamicResource ValidationBrush5}"
                    Margin="1,3,0,0" />
                <Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="{DynamicResource WhiteColorBrush}" Margin="1,3,0,0" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ComboBox Style-->
  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource Gray7}" />
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <Grid.Resources>
              <Style x:Key="comboToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="3" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                      <Grid>
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                    Storyboard.TargetName="MouseOverBorder">
                                  <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                    Storyboard.TargetName="PressedBorder">
                                  <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled" />
                          </VisualStateGroup>
                          <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                    Storyboard.TargetName="CheckedRectangle">
                                  <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked" />
                          </VisualStateGroup>
                          <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Focused">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                    Storyboard.TargetName="FocusRectangle">
                                  <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unfocused" />
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}"
                            IsHitTestVisible="false" Opacity="0" />
                        <Border x:Name="MouseOverBorder" Background="{DynamicResource GrayBrush8}"
                            BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                        <Border x:Name="PressedBorder" Background="{DynamicResource GrayBrush5}"
                            BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                        <Rectangle x:Name="FocusRectangle" Stroke="{DynamicResource TextBoxMouseOverInnerBorderBrush}"
                            Opacity="0" />
                        <Rectangle x:Name="CheckedRectangle" StrokeThickness="{TemplateBinding BorderThickness}"
                            Opacity="0" Stroke="{DynamicResource TextBoxMouseOverBorderBrush}" />
                        <Rectangle x:Name="FocusVisualElement" IsHitTestVisible="false" Margin="1"
                            Stroke="{DynamicResource HighlightBrush}" StrokeThickness="1" Visibility="Collapsed" />

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.45" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="FocusRectangle">
                      <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="FocusedDropDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Duration="00:00:00"
                        Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PopupBorder">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                        Storyboard.TargetName="ValidationErrorElement">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                        Storyboard.TargetName="validationTooltip">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="ContentPresenterBorder">
              <Grid>
                <ToggleButton x:Name="DropDownToggle" BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                    HorizontalAlignment="Stretch" HorizontalContentAlignment="Right" Margin="0"
                    Style="{DynamicResource comboToggleStyle}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    VerticalAlignment="Stretch">
                  <Path x:Name="BtnArrow"
                      Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                      HorizontalAlignment="Right" Height="4" Margin="0,0,6,0" Stretch="Uniform" Width="8">
                    <Path.Fill>
                      <SolidColorBrush x:Name="BtnArrowColor" Color="{DynamicResource Gray3}" />
                    </Path.Fill>
                  </Path>
                </ToggleButton>
                <Grid Margin="0 0 16 0">
                  <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                      Content="{TemplateBinding SelectionBoxItem}"
                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false"
                      Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </Grid>
            </Border>
            <Rectangle x:Name="FocusRectangle" Stroke="{DynamicResource TextBoxMouseOverInnerBorderBrush}" Opacity="0" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteColorBrush}"
                IsHitTestVisible="false" Opacity="0" />
            <Border x:Name="ValidationErrorElement" BorderBrush="{DynamicResource ControlsValidationBrush}"
                BorderThickness="1" Visibility="Collapsed">
              <ToolTipService.ToolTip>
                <ToolTip x:Name="validationTooltip"
                    DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                    PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                    Template="{DynamicResource ValidationToolTipTemplate}">
                  <ToolTip.Triggers>
                    <EventTrigger RoutedEvent="Canvas.Loaded">
                      <BeginStoryboard>
                        <Storyboard>
                          <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible"
                              Storyboard.TargetName="validationTooltip">
                            <DiscreteObjectKeyFrame KeyTime="0">
                              <DiscreteObjectKeyFrame.Value>
                                <System:Boolean>true</System:Boolean>
                              </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                          </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                      </BeginStoryboard>
                    </EventTrigger>
                  </ToolTip.Triggers>
                </ToolTip>
              </ToolTipService.ToolTip>
              <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0"
                  VerticalAlignment="Top" Width="12">
                <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="{DynamicResource ValidationBrush5}"
                    Margin="1,3,0,0" />
                <Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="{DynamicResource WhiteColorBrush}" Margin="1,3,0,0" />
              </Grid>
            </Border>
            <Popup x:Name="PART_Popup"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom">
              <Border x:Name="PopupBorder" Effect="{DynamicResource DropShadowBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" Height="Auto"
                  BorderBrush="{DynamicResource ComboBoxPopupBrush}" Background="{DynamicResource WhiteBrush}">
                <ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" Margin="2" Padding="1">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ComboBoxItem Style-->
  <Style TargetType="ComboBoxItem">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBoxItem">
          <Grid Background="{TemplateBinding Background}" Margin="0,0.5">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="MouseOverRectangle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value=".65" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="contentPresenter">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        Storyboard.TargetName="SelectedRectangle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0"
                Fill="{DynamicResource HighlightBrush}" />
            <Rectangle x:Name="MouseOverRectangle" IsHitTestVisible="False" Opacity="0"
                Fill="{DynamicResource HighlightBrush}" />
            <ContentControl>
              <ContentControl.Foreground>
                <SolidColorBrush x:Name="ContentPresenterWrapperColor" Color="{DynamicResource NormalForegroundColor}" />
              </ContentControl.Foreground>
              <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </ContentControl>
            <Rectangle x:Name="FocusVisualElement" Stroke="{DynamicResource HighlightBrush}" StrokeThickness="1"
                Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ProgressBar Style-->
  <Style TargetType="ProgressBar">
    <Setter Property="Foreground" Value="{DynamicResource HighlightBrush}" />
    <Setter Property="Background" Value="{DynamicResource GrayBrush4}" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="Height" Value="10" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ProgressBar">
          <Grid x:Name="Root">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <ObjectAnimationUsingKeyFrames Duration="00:00:00"
                        Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="IndeterminateRoot">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Duration="00:00:00"
                        Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DeterminateRoot">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Collapsed</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="X" Storyboard.TargetName="xTransform">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="00:00:.35" Value="20" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="PART_Track" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
            <Grid x:Name="ProgressBarRootGrid">
              <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
                <Rectangle x:Name="IndeterminateSolidFill" Margin="{TemplateBinding BorderThickness}" Opacity="1"
                    RenderTransformOrigin="0.5,0.5" StrokeThickness="0" Fill="{DynamicResource BrandingBrush}" />
                <Rectangle x:Name="IndeterminateGradientFill" Margin="{TemplateBinding BorderThickness}" Opacity="0.7"
                    StrokeThickness="1">
                  <Rectangle.Fill>
                    <LinearGradientBrush EndPoint="0,1" MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="20,1">
                      <LinearGradientBrush.Transform>
                        <TransformGroup>
                          <TranslateTransform X="0" x:Name="xTransform" />
                          <SkewTransform AngleX="-30" />
                        </TransformGroup>
                      </LinearGradientBrush.Transform>
                      <GradientStop Color="{DynamicResource ProgressIndeterminateColor1}" Offset="0" />
                      <GradientStop Color="{DynamicResource ProgressIndeterminateColor2}" Offset="0.651" />
                      <GradientStop Color="{DynamicResource ProgressIndeterminateColor3}" Offset="0.093" />
                      <GradientStop Color="{DynamicResource ProgressIndeterminateColor4}" Offset="0.548" />
                    </LinearGradientBrush>
                  </Rectangle.Fill>
                </Rectangle>
              </Grid>
              <Grid x:Name="DeterminateRoot" Margin="1">
                <Border x:Name="PART_Indicator" Background="{DynamicResource BrandingBrush}" HorizontalAlignment="Left"
                    Margin="-1">
                  <Rectangle x:Name="GradientFill" Opacity="0.7" Visibility="Collapsed">
                    <Rectangle.Fill>
                      <LinearGradientBrush EndPoint="0,1" MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="20,1">
                        <LinearGradientBrush.Transform>
                          <TransformGroup>
                            <TranslateTransform X="0" />
                            <SkewTransform AngleX="-30" />
                          </TransformGroup>
                        </LinearGradientBrush.Transform>
                        <GradientStop Color="{DynamicResource ProgressIndeterminateColor1}" Offset="0" />
                        <GradientStop Color="{DynamicResource ProgressIndeterminateColor2}" Offset="0.651" />
                        <GradientStop Color="{DynamicResource ProgressIndeterminateColor3}" Offset="0.093" />
                        <GradientStop Color="{DynamicResource ProgressIndeterminateColor4}" Offset="0.548" />
                      </LinearGradientBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Border>
              </Grid>
            </Grid>

          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform" TargetName="Root">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="true">
              <Setter Property="Visibility" TargetName="IndeterminateRoot" Value="Visible" />
              <Setter Property="Visibility" TargetName="DeterminateRoot" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="1" />
  </Style>

  <!--Thumb Style-->
  <Style x:Key="HorizontalSliderThumb" TargetType="Thumb">
    <Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Background="{DynamicResource BlackBrush}" BorderThickness="0,0,1,0"
                BorderBrush="{DynamicResource ControlBackgroundBrush}" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteColorBrush}"
                IsHitTestVisible="false" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--VerticalSliderThumb-->
  <Style x:Key="VerticalSliderThumb" TargetType="Thumb">
    <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        Storyboard.TargetName="DisabledVisualElement">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Background="{DynamicResource BlackBrush}" BorderThickness="0,1,0,0"
                BorderBrush="{DynamicResource ControlBackgroundBrush}" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource DisabledWhiteColorBrush}"
                IsHitTestVisible="false" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--RepeatButtonTemplate-->
  <ControlTemplate x:Key="RepeatButtonTemplate">
    <Grid x:Name="Root" Opacity="0" />
  </ControlTemplate>
  <!--HorizontalTrackLargeDecrease-->

  <Style x:Key="HorizontalTrackLargeDecrease" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid x:Name="Root" Margin="0,-1,0,0">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle Height="3" Margin="0,1,0,0">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource Gray6}" />
              </Rectangle.Fill>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>
  <Style x:Key="HorizontalTrackValue" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid x:Name="Root" Margin="0,-1,0,0">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle Height="3" Margin="0,1,0,0">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource AccentColor}" />
              </Rectangle.Fill>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--VerticalTrackLargeDecrease-->
  <ControlTemplate x:Key="VerticalTrackLargeDecrease" TargetType="RepeatButton">
    <Grid x:Name="Root" Margin="0,0,0,0">
      <Rectangle Width="3">
        <Rectangle.Fill>
          <SolidColorBrush Color="{DynamicResource BlackColor}" />
        </Rectangle.Fill>
      </Rectangle>
    </Grid>
  </ControlTemplate>

  <!--Slider Style-->
  <Style TargetType="Slider">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Maximum" Value="10" />
    <Setter Property="Minimum" Value="0" />
    <Setter Property="Value" Value="0" />
    <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Slider">
          <Grid x:Name="Root">
            <Grid.Resources>
              <ControlTemplate x:Key="RepeatButtonTemplate">
                <Grid x:Name="Root" Opacity="0" />
              </ControlTemplate>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="Focused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="HorizontalTemplate" Background="{TemplateBinding Background}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Track x:Name="PART_Track" Grid.ColumnSpan="3" Grid.Column="0" Height="18">
                <Track.DecreaseRepeatButton>
                  <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource HorizontalTrackValue}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                  <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                      Style="{StaticResource HorizontalTrackLargeDecrease}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                  <Thumb x:Name="HorizontalThumb" Grid.Column="1" Height="10" IsTabStop="True" Width="4"
                      Style="{StaticResource HorizontalSliderThumb}" />
                </Track.Thumb>
              </Track>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
              <Setter Property="Style" TargetName="HorizontalThumb" Value="{StaticResource HorizontalSliderThumb}" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
              <Setter Property="Style" TargetName="HorizontalThumb" Value="{StaticResource HorizontalSliderThumb}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
  </Style>

  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Background" Value="{x:Null}" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
  </Style>

  <Style TargetType="TabItem">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="6,2,6,2" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MinWidth" Value="5" />
    <Setter Property="MinHeight" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Label x:Name="root" FontSize="26.67" FontFamily="{DynamicResource HeaderFontFamily}">
            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
          </Label>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="root" Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource AccentColor}" />
                </Setter.Value>
              </Setter>
            </Trigger>

            <Trigger Property="IsSelected" Value="false">
              <Setter TargetName="root" Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource Gray11}" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger SourceName="root" Property="IsMouseOver" Value="True">
              <Setter TargetName="root" Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource Gray3}" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>